\documentclass[brazil,ruledheader]{abnt}
\usepackage[T1]{fontenc}
\usepackage[latin1]{inputenc}

\usepackage{palatino}
\usepackage {graphicx}
\usepackage{babel}
\usepackage{setspace}
%\usepackage{hyperref}
\usepackage {fancyvrb}
\usepackage{color}
\usepackage{textcomp}
\usepackage{subfigure}
\usepackage{listings}
\usepackage{paralist} % para listas inline com inparaenum

\makeatletter
\makeatother

\definecolor{light-gray}{gray}{0.6}

\begin{document}
\renewcommand{\lstlistlistingname}{Lista de Listagens}
\renewcommand{\lstlistingname}{Listagem}

\autor{Fausto Guzzo da Costa \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ nUsp: 5230736\\ Filipe Del Nero Grillo \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ nUsp: 5378140 \\ Vinicíus Augusto Tagliatti Zani \ \ \ \ \ \ \ nUsp: 5118935}


\titulo{Avaliação de Sistemas de Arquivos \\  \normalsize \textcolor{light-gray}{(Ext4, ReiserFS e XFS)}}



\comentario{Monografia apresentada para conclusão da disciplina de Sistemas Operacionais da pós-graduação do ICMC-USP em 2011}


\instituicao{Instituto de Ciências Matemáticas e de Computação \par Universidade
de São Paulo \par ICMC - USP
}

\local{São Carlos - SP, Brasil}


\data{20 de junho de 2011}

\capa

\folhaderosto


% \begin{folhadeaprovacao}
% \ \\\ \\\ \\\ \\\ \\\ \\\ \\\ \\\ \\\ \\\ \\\ \\\ \\\ \\\ \\\ \\\ \\\ \\\ \\\ \\\ \\\ \\
% \begin{flushright}{}``\emph{É impossível avaliar a força que possuímos sem }\\
% \emph{medir o tamanho do obstáculo que podemos vencer, }\\
% \emph{nem o valor de uma ação sem sabermos}\\
% \emph{o sacrifício que ela comporta.}``\\
% {\small H. W. Beecher}\end{flushright}{\small \par}
% \end{folhadeaprovacao}

\begin{resumo}
\doublespacing

resumo aqui!

\end{resumo}


\tableofcontents{}
\listadefiguras
\listadetabelas

\doublespacing
%%%% ------------------------------------------------------------------
%%%% ------------------------------------------------------------------
%%%% ------------------------------------------------------------------

\chapter{Introdução}\label{cap:introducao}

%%%% ------------------------------------------------------------------

\section{Contexto e Motivação}\label{sec:contexto}

A complexidade crescente presente nos computadores, motivada pelas necessidades
cada vez mais apuradas de um mercado tecnológico em plena evolução, faz com que
diversas funcionalidades que antigamente atendiam plenamente às necessidades se
tornem obsoletas. Tais mudanças podem ser observadas no âmbito de hardware e
software. Para os softwares, mais especificamente dentro do domínio de sistemas
operacionais, a evolução também se mostra verdadeira, pois esse conjunto de
sistemas é responsável por grande parte da integração que ocorre entre
equipamentos de diversos fabricantes, além de prover abstração para que os
componentes possam ser utilizados por terceiros, por via de softwares
executáveis no contexto dos sistemas operacionais.
Portanto, torna-se crescente a necessidade de melhores técnicas de utilização
dos componentes periféricos, ao passo que a organização interna dos sistemas
operacionais deve ser mantida coesa, segura e eficiente, objetivando uma
evolução de longo prazo ao mesmo tempo em que as soluções para os problemas
atuais são elaboradas.

No contexto de utilização de disco, o sistema operacional encapsula as diversas
marcas de diversos fabricantes em chamadas de rotina simples e genéricas que
permitem uma utilização transparente pela camada de aplicações.
Dessa forma o desenvolvedor de aplicações para o sistema operacional em questão
deve saber somente o conjunto de chamadas genéricas que lhe permite executar as
operações de leitura, escrita, abertura e fechamento de arquivos. Cabe assim ao
sistema operacional gerir o fluxo de informações e sua organização interna,
abstraindo os arquivos lógicos --- aqueles visíveis para as aplicações --- em
arquivos físicos --- mapeados em hardware. 
A gestão de arquivos lógicos e seu mapeamento em partes físicas é foco de estudo
desde há muito tempo no domínio de sistemas operacionais, pois é sabido que o
armazenamento secundário é um grande gargalo a ser enfrentado em aplicações que
o utilizam.

Assim sendo, diversas propostas têm sido feitas para gestão interna de arquivos
de sistemas operacionais. No contexto de sistemas operacionais de código aberto,
podemos encontrar propostas de sistemas de arquivos. Nesse âmbito Ext4, XFS e
ReiserFS foram lançados ao público como sistemas de arquivos eficientes para o
sistema operacional Linux, baseado em Unix, e têm tido adoção crescente como
consequência das funcionalidades que oferecem para realização de gestão de arquivos.

%%%% ------------------------------------------------------------------
		
\section{Objetivos}\label{sec:objetivos}

Este trabalho tem como objetivo avaliar o desempenho dos sistemas de arquivos Ext4, XFS e ReiserFS em comparação uns aos outros. Esta avaliação pretende explicitar vantagens e desvantagens destes sistemas de arquivos e esclarecer em que situações cada um possui melhor desempenho. 


\section{Organização do trabalho}\label{sec:organizacao}

O Capítulo \ref{cap:fundamentacao} descreve os sistemas de arquivos que serão
avaliados e apresenta as características necessárias para o correto
entendimento da execução dos experimentos desse trabalho. O capítulo
\ref{cap:metodos}, as ferramentas utilizadas para execução dos experimentos e o
ambiente no qual foram executados são apresentados. No Capítulo
\ref{cap:planejamento} descreve-se em detalhes o planejamento e a execução dos
experimentos. São definidos os fatores e níveis que serão avaliados, a lista de
todos os experimentos e o planejamento adotado.  O capítulo
\ref{cap:resultados} traz os resultados obtidos através da coleta realizada nos
experimentos e possuis gráficos comparativos dos experimentos bem como análise
da influência dos fatores. Por fim, o Capítulo \ref{cap:conclusao} traz as
conclusões sobre cada uma das etapas do experimento e considerações finais.


%%%% ------------------------------------------------------------------
%%%% ------------------------------------------------------------------
%%%% ------------------------------------------------------------------

\chapter{Fundamentação}\label{cap:fundamentacao}

\section{Considerações iniciais}\label{sec:cap2_consIni}

Este trabalho envolve técnicas de Avaliação de Desempenho e os Sistemas de
Arquivos XFS, EXT4 e ReiserFS. Este capítulo descreve os conceitos e teorias dos
tópicos citados.

%%%% ------------------------------------------------------------------

\section{XFS}\label{sec:xfs}

Nessa seção será primeiramente apresentada a história do desenvolvimento do XFS,
e após a arquitetura do mesmo.

\subsection{História}\label{subsection:xfs-historia}

O sistema de arquivos XFS foi desenvolvido para o sistema operacional IRIX, da
Silicon Graphics em 1994. Ele foi planejado para resolver os problemas do
sistema de arquivos que era utilizado, o EFS (\emph{Extents File System}). Os
problemas apresentados na época eram decorrentes de novas aplicações e novos
\emph{hardwares} que estavam surgindo. Aplicações para edição de vídeo
descomprimidos, por exemplo, precisavam alocar centenas de \emph{gigabytes} de
espaço, e o EFS suportava apenas 8 GB de arquivos, sendo que cada arquivo podia
ter no máximo 2 GB. Além disso, o acesso ao disco rígido precisava ser
otimizado, pois havia muito \emph{overhead} \cite{xfsScability}.

O XFS foi distribuído na licença GNU \emph{General Public License} em 2000, e o
primeiro suporte à esse sistema de arquivos foi em 2001, no kernel 2.4 do Linux.
Hoje ele está disponível para quase todas as distribuições Linux.

\subsection{Arquitetura}\label{subsection:xfs-arch}

Um sistema de arquivos XFS é dividido em vários Allocation Groups (AGs) de mesmo
tamanho. Um AG pode ser pensado como sendo um sistema de arquivos autônomo,
podendo ter até um \emph{terabyte} de tamanho, e tem as seguintes
características:
\begin{enumerate}[(i)]
 \item Contém um superbloco descrevendo as suas informações;
 \item Capacidade de gerenciar o seu espaço livre;
 \item Aloca e busca por \emph{inodes}.
\end{enumerate}
A ideia do desenvolvimento do XFS com AGs, é que conforme o acesso concorrente
aumenta no sistema de arquivos, o XFS consegue paralelizar as várias operações
sem degradar o desempenho.

Cada AG é dividido em 4 partes como mostra a figura \ref{fig:xfs_ag}. A primeira parte é o superbloco,
responsável por guardar todas as informações do AG, como tamanho dos blocos, dos
setores e dos \emph{inodes}, versão do XFS, contadores para número de \emph{inodes} alocados e
livres, etc. Esse superbloco é replicado dentro do AG, então caso haja uma
falha, ele pode ser recuperado.

\begin{figure} [!ht]
\begin{center}
\includegraphics[width=0.7\textwidth]{images/xfs_ag.png}
\caption {Detalhes de um \emph{Allocation Group} do XFS \cite{xfsStructure}.}
\label{fig:xfs_ag}
\end{center}
\end{figure}

A segunda parte do AG é o gerenciamento de espaço livre, que é feito através do
uso de duas árvores B+. Por motivos de otimização, uma delas é ordenada por
número do bloco, e a outra por quantidade de espaço contiguo.

A terceira parte é responsável pelo gerenciamento de \emph{inodes} no sistema de
arquivos, sendo responsável por alocar e buscar \emph{inodes}. Os \emph{inodes} são alocados
em grupos de 64, e são buscados através de uma árvore B+.

A quarta parte é responsável por reservar espaço para possível crescimento das
árvores B+ descritas previamente. Esse espaço não pode ser alocado por nenhum
outro tipo de dado.

%%%% ------------------------------------------------------------------

\section{Ext4}\label{sec:ext4}

Nesta seção será apresentada a história do sistema de arquivos Ext até a chegada
em sua última versão, a Ext4. Em seguida essa última versão será estudada em
mais detalhes.

\subsection{História}\label{subsection:ext-historia}

O sistema de arquivos Ext --- \emph{Extended File System} --- nasceu através de
pesquisas realizadas por Rémy Card et al. em 1992 \cite{Card94DISEf}, e foi
integrada ao Linux em sua versão 0.96c. Esse novo sistema de arquivos resolveu
duas grandes limitações impostas pelo sistema de arquivos Minix \cite{Silberschatz08OSC}:
\begin{enumerate}[(i)]
  \item O limite de 64 MB\footnote{\emph{Mega Bytes}: 1024 Bytes.} para tamanho
  de arquivo: Ext passou a permitir arquivos de até 2 GB\footnote{\emph{Giga
  Bytes}: 1024 MB.}; e
  \item O limite de 14 caracteres para o nome do arquivo: Ext passou a permitir
  nomes de arquivos de até 255 caracteres.
\end{enumerate}
Entretanto, alguns problemas ainda estavam presentes nessa implementação. Por
exemplo, não havia acesso separado, modificação de \emph{inodes} e marcação de
datas de modificação\footnote{O termo utilizado em inglês é \emph{timestamp}.}.
Este sistema de arquivos utilizava listas encadeadas para manter controle dos
blocos livres, e isso degradava a performance \cite{Card94DISEf}: à medida que o
sistema operacional era utilizado, a lista se tornava não-ordenada, e o sitema
de arquivos se tornava fragmentado.

Como resposta a estes problemas, dois novos sistemas de arquivos foram
desenvolvidos em versão alfa, em Janeiro de 1993: o sistema de arquivos Xia e o
Ext2 --- \emph{Second Extended File System}. Enquanto o Xia representava algumas
melhorias para o sistema Minix, o Ext2 era baseado no código do Ext e trazia
melhorias como \cite{Card94DISEf}:
\begin{enumerate}[(i)]
  \item Suporte a padrões de arquivos Unix padrão;
  \item Capacidade de gerir sistemas de arquivos criados em partições de até 4
  TeraBytes, eliminando a necessidade de várias partições para utilização de
  discos grandes;
  \item Capacidade de nomes de arquivos de até 1012 caracteres; e
  \item Reserva de blocos para super usuário (\emph{root}), em geral 5\%. Isso
  permite com que administradores de sistema recuperem o sistema em situações
  onde o disco fica cheio.
\end{enumerate}

Em novembro de 2001 foi introduzida uma nova versão do sistema de arquivos Ext,
a Ext3. Com muitas novidades, essa versão foi rapidamente integrada às versões
mais populares do Linux \cite{Mathur07TNEFcsfp}. Entre as inovações apresentadas
por essa versão está a introdução de \emph{journaling} como ferramenta para
aumento da confiabilidade de sistema, em casos onde há interrupção repentina do
funcionamento do sistema operacional. A função do \emph{journaling} é salvar em
um \emph{log} as operações a serem executadas. Esse \emph{log} é utilizado na
inicialização do sistema para restaurá-lo a um estado válido.
Com o passar do tempo, o sistema de arquivos Ext3 foi tornando-se limitado para
as necessidades de utilização, tanto pessoal quanto na indústria, especialmente
em relação ao seu limite de tamanho de arquivos. Assim uma atualização desse
sistema de arquivos foi feita em 2006 \cite{Mathur07TNEFcsfp}. Em Dezembro de
2008 surgiu o Ext4. Esse sistema será detalhado na sub-seção \ref{subsection:ext4}.

Por fim, vale observar que as versões mais recentes do Ext sempre suportam as
versões mais antigas, o que justifica a facilidade de adoção pelo mercado: não
há esforço em migração de dados para novos formatos, pois o sistema pode operar
ao mesmo tempo com partições de versões anteriores.

%%%% ------------------------------------------------------------------

\subsection{Ext4}\label{subsection:ext4}

O sistema de arquivos Ext4 vem sendo utilizado no Linux desde a sua
versão 2.6.19. Seus grandes objetivos são de resolver problemas de
escalabilidade e de gargalo do seu antecessor --- o Ext3, detalhado na sub-seção
\ref{subsection:ext-historia}.
São avanços notados nesse sitema de arquivos \cite{Mathur07TNEFcsfp}:
\begin{enumerate}
  \item Utilização de 48 bits para mapeamento de blocos, frente aos 32 bits
  utilizados pelo Ext3. Isso permite com que sistemas de arquivos de até
  256 TB sejam mapeados;
  
  \item Utilização de \emph{extents} para gravação de arquivos. Um \emph{extent}
  é uma posição contígua no disco, representada por início e fim em um descritor
  contido em um \emph{inode}, num limite de quatro \emph{extents} por
  \emph{inode}. Assim, arquivos fragmentados exigem mais \emph{extents} que um
  arquivo pequeno ou contíguo em disco. Um \emph{extent} pode ter até 2$^{15}$
  blocos, ou 128 MB quando os blocos são de 4 KB. Sua utilização otimiza tanto
  leitura quanto escrita em disco para arquivos grandes. A solução implementada
  no Ext3 --- mapeamento indireto de bloco --- era boa para arquivos pequenos e
  esparsos, mas ineficiente para casos onde arquivos grandes eram utilizados.
  Esse mapeamento de \emph{extents} é observado na Figura \ref{fig:ext4_extents};
  
  \item Utilização de bits reservados de \emph{inode} para mapear blocos de
  arquivos, elevando a limitação de tamanhos de arquivos de 2 TB (Ext3)) para 16
  TB (Ext4). Há um planejamento para que o limite seja elevado nas melhorias
  futuras desse sistema de arquivos;
  
  \item Eliminação de restrição de número de subdiretórios contidos em um único
  diretório, e indexação de diretórios usando uma árvore H\footnote{Uma árvore
  H é uma implementação de árvores B usando \emph{hashes} de 32 bits.} de
  profundidade fixa. O sistema de arquivos Ext3 possuía um limite de 32000 arquivos;
  
  \item Pré-alocação persistente, onde os blocos são reservados fisicamente no
  disco para arquivos que ainda não os ocuparam. Essa característica é útil para
  minimizar fragmentação de arquivos;
  
  \item Alocação atrasada de blocos múltiplos, onde as operações de escrita são
  mantidas em \emph{cache} até que ocorra um \emph{flush} de página, e ele seja
  de fato aplicado em disco. Essa característica melhora utilização de disco e
  minimiza fragmentação, fazendo melhor uso dos \emph{extents};
  
  \item Melhorias na forma como a integridade do sistema de arquivos é
  verificada (usando a ferramenta \emph{e2fsck}). O ganho de performance é
  visível quando comparado à versão Ext3; e
  
  \item Utilização de \emph{checksum} CRC32 nos metadados utilizados para
  recuperação do sistema de arquivos --- o \emph{journal}. Assim o sistema não
  confia cegamente nos dados de reparação, e pode evitar danos de recuperação
  indevida.
\end{enumerate}

As características acima descrita permitem obter uma melhor visão do sistema de
arquivos Ext4, utilizado na avialiação de desempenho conduzida como foco desse
trabalho.

\begin{figure} [!ht]
\begin{center}
\includegraphics[width=0.7\textwidth]{images/ext4_extents.png}
\caption {Uso de \emph{extents} no sistema de arquivos Ext4 \cite{Mathur07TNEFcsfp}.}
\label{fig:ext4_extents}
\end{center}
\end{figure}

%%%% ------------------------------------------------------------------
%%%% ------------------------------------------------------------------
%%%% ------------------------------------------------------------------

\section{ReiserFS}\label{sec:reiser}

O ReiserFS foi criado em 1996 por Hans Thomas Reiser e se tornou muito famoso, entre outras coisas, por ser o primeiro sistema de arquivos a utilizar a técnica de \textit{journaling} para melhorar a confiabilidade do sistema. No caso do ReiserFS, o \textit{journaling} embora sejam guardadas informações sobre todo o sistema de arquivos, ele tem a intenção de garantir a integridade dos metadados dos arquivos, ou seja, ele não é capaz de reconstruir todo o sistema de arquivos a partir do \textit{journal}.

Passou a ser suportado oficialmente pelo kernel do linux a partir de sua versão 2.4 e chegou a ser adotado como sistema de arquivos padrão da distribuição comercial da Novell, o SUSE Linux Enterprise. Sua adoção foi baseada no fato do Reiser ser o único sistema de arquivos da época que possuia \textit{journaling} e também em acordos de suporte com a empresa de de seu criador a Namesys.

Este sistema utiliza árvores B* para melhorar o desempenho em operações de busca. De acordo com a documentação encontrada sobre o sistema\cite{sitereiser} ele pode ser utilizado com quatro opções de tamanho de bloco: 4096 (padrão), 512, 1024 e 8192 KBytes. No entanto, durante testes preliminares com o sistema Kubuntu 10.10 não foi possível criar um sistema de arquivos Reiser com tamanho de bloco diferente de 4096 KBytes. Em função disso, nas etapas 2 e 3 da avaliação o fator B - Tamanho do bloco não foi utilizado.

Á estrutura de árvore utilizada possui dois tipos de nós: Nós internos e nós folhas e cada nó é um bloco do disco. O primeiro tipo é utilizado para manter a estrutura de árvore, apontando para outros blocos. Os nós folha são os itens propriamente ditos. No ReiserFS os itens podem representar arquivos, diretórios ou \textit{stat item}. Os arquivos podem ser de dois tipos, itens diretos ou indiretos, dependendo do tamanho do arquivo.

Cada diretório ou arquivo é sempre precedido por um \textit{stat item} que contém metadados sobre o arquivo ou diretório que o sucede.

A Figura \ref{fig:reisertree} mostra um exemplo da estrutura de árvore utilizada pelo ReiserFS para organizar os arquivos no disco.

\begin{figure} [!ht]
\begin{center}
\includegraphics[width=1\textwidth]{images/stree.png}
\caption {Modelo de árvore utilizado pelo ReiserFS com blocos internos representados pelos blocos retangulares e blocos folha representados por esferas.}
\label{fig:reisertree}
\end{center}
\end{figure}

%%%% ------------------------------------------------------------------
%%%% ------------------------------------------------------------------
%%%% ------------------------------------------------------------------

\chapter{Métodos e Ferramentas}\label{cap:metodos}

A seguir encontra-se uma descrição detalhada da ferramenta utilizada e o
ambiente no qual os experimentos foram executados.

\section{IOzone}\label{sec:iozone}

A ferramenta IOzone é uma ferramenta de avaliação de desempenho de sistemas de
arquivo \cite{IOZone06IFB}.
Esta ferramenta foi disponibilizada para diversas versões de sistemas
operacionais, incluindo Kubuntu Linux, a distribuição Linux utilizada para
realização da avaliação de desempenho desse trabalho. 
Quando a ferramenta é utilizada, ela simula a utilização dos discos de uma
máquina, ao passo em que faz medições de tempo, utilização e taxa de
entrada/saída para os algoritmos utilizados. Assim, são operações utilizáveis
e mensuráveis:
\begin{multicols}{2}
\begin{itemize}
  \item Read;
  \item Write;
  \item Re-read;
  \item Re-write;
  \item Read backwards;
  \item Read strided;
  \item Fread;
  \item Fwrite;
  \item Random read;
  \item Pread;
  \item Mmap;
  \item Aio read; e
  \item Aio write.
\end{itemize}
\end{multicols}

No contexto desta avaliação de desempenho foram utilizadas somente medidas para
\emph{Read}, \emph{Random read}, \emph{Write} e \emph{Random write}.


\section{Ambiente}\label{sec: ambiente}

Os experimentos foram executados computador desktop com as seguintes configurações:

\begin{itemize}
\item Processador: AMD Atlhon 64bits X2 Dual Core Processor 4000+
\item Memória: 1GB/2GB (Dois pentes de 1GB) DDR2 800Mhz
\item HD: Samsung SP2004C 200GB 7200rpm 8MB de cache
\item Sistema operacional: Kubuntu Linux 10.10 32bits, Kernel 2.6.35-28-generic
\end{itemize}

Para execução das repetições de cada experimento foi criado um \textit{script}
bash que roda automaticamente todas as variações de fatores para a configuração
de memória RAM da máquina. Então é necessário alterar a configuração de memória
manualmente e depois executar o \textit{script} novamente. O \textit{script}
pode ser encontrado no Anexo \ref{cap:scripts}.

%%%% ------------------------------------------------------------------
%%%% ------------------------------------------------------------------
%%%% ------------------------------------------------------------------

\chapter{Planejamento e execução}\label{cap:planejamento}

Neste capítulo são especificados o modelo de avaliação que foi adotado, quais as variáveis de resposta medidas, fatores e níveis considerados e como os experimentos foram divididos em etapas.

\section{Variáveis de resposta, fatores e níveis}\label{sec:fatores}

Para a escolha das variáveis de resposta foram escolhidas as operações mais comuns utilizados pelo sistemas operacionais que são escrita e leitura. Portanto, as variáveis de resposta escolhida foram:

\begin{itemize}
 \item Leitura
 \item Escrita
 \item Leitura aleatória
 \item Escrita aleatória
\end{itemize}

Para a avaliação foi adotado o planejamento fatorial completo 2$^{4}$ na etapa 1 e fatorial completo 2$^{3}$ para as etapas 2 e 3 para manter a complexidade dos complexidade dos experimentos em um nível aceitável foram utilizados apenas 4 fatores que acredita-se que poderiam ter maior influência sobre os resultados dos experimentos e cada um deles com 2 níveis de variação.

Para simplificar a execução dos experimentos e ainda assim comparar todos os sistemas uns com os outros, a avaliação foi dividida em 3 etapas. Na etapa 1 foram comparados os sistemas de arquivos Ext4 e o XFS. A Tabela \ref{tab:etapa1_niveis} mostra os fatores e níveis escolhidos para a etapa 1.

\begin{table}[htbp]
\begin{center}
\begin{tabular}{|l|l|l|}
\hline
\textbf{Fator} & \textbf{Nível 1} & \textbf{Nível -1} \\ \hline
A - Sistema de arquivo & Ext4 & XFS \\ \hline
B - Tamanho do bloco & 4KB & 1KB \\ \hline
C - Memória RAM & 1GB & 2GB \\ \hline
D - Tamanho do arquivo & 64KB & 64MB \\ \hline
\end{tabular}
\caption{Fatores e níveis escolhidos para a Etapa 1.}
\label{tab:etapa1_niveis}
\end{center}
\end{table}

Na etapa 2 foram comparados os sistemas de arquivos Ext4 e ReiserFS e a Tabela \ref{tab:etapa2_niveis} mostra os fatores e níveis adotados para a etapa 2. Como foi dito anteriormente, o ReiserFS não permite a mundança do tamanho do bloco, este fator não foi considerado para as etapas 2 e 3 e o bloco ficou fixado em 4096 bytes para ambos os sistemas comparados nessas etapas.

\begin{table}[htbp]
\begin{center}
\begin{tabular}{|l|l|l|}
\hline
\textbf{Fator} & \textbf{Nível 1} & \textbf{Nível -1} \\ \hline
A - Sistema de arquivo & Ext4 & ReiserFS \\ \hline
C - Memória RAM & 1GB & 2GB \\ \hline
D - Tamanho do arquivo & 64KB & 64MB \\ \hline
\end{tabular}
\caption{Fatores e níveis escolhidos para a Etapa 2.}
\label{tab:etapa2_niveis}
\end{center}
\end{table}

Na etapa 3 foram comparados os sistemas XFS e ReiserFS. A Tabela \ref{tab:etapa3_niveis} mostra os fatores e níveis adotados para esta etapa.

\begin{table}[htbp]
\begin{center}
\begin{tabular}{|l|l|l|}
\hline
\textbf{Fator} & \textbf{Nível 1} & \textbf{Nível -1} \\ \hline
A - Sistema de arquivo & XFS & ReiserFS \\ \hline
C - Memória RAM & 1GB & 2GB \\ \hline
D - Tamanho do arquivo & 64KB & 64MB \\ \hline
\end{tabular}
\caption{Fatores e níveis escolhidos para a Etapa 3.}
\label{tab:etapa3_niveis}
\end{center}
\end{table}



\section{Experimentos}\label{sec:experimentos}

Na etapa 1 da avaliação foram realizados 16 experimentos para cobrir todas as variações possíveis entre os 2 níves de cada um dos 4 fatores definidos anteriormente. Para as etapas 2 e 3 foram realizados 8 experimentos, novamente para cobrir todas as variações entre os 2 níveis e 3 fatores definidos anteriormente. Para cada experimento foram realizadas 10 repetições resultando em um total de 160 execuções na etapa 1, 80 execuções na etapa 2 e 80 execuções na etapa 3 em função de possuírem 1 fator a menos do que a etapa 1. 

A tabela \ref{tab:etapa1_experimentos} mostra os níveis utilizados em cada um dos 16 experimentos realizados na etapa 1 e a Tabela \ref{tab:etapa2e3_experimentos} mostra os níveis utilizados em cada um dos 8 experimentos tanto da etapa 2 quanto da etapa 3. A definição dos fatores A, B, C e D podem ser encontradas nas Tabelas \ref{tab:etapa1_niveis}, \ref{tab:etapa2_niveis} e \ref{tab:etapa3_niveis}

\begin{table}[htbp]
\begin{center}
\begin{tabular}{|c|c|c|c|c|}
\hline
\textbf{Experimento} & \textbf{A} & \textbf{B} & \textbf{C} & \textbf{D} \\ \hline
\textbf{1} & 1 & 1 & 1 & 1 \\ \hline
\textbf{2} & 1 & 1 & 1 & -1 \\ \hline
\textbf{3} & 1 & 1 & -1 & 1 \\ \hline
\textbf{4} & 1 & 1 & -1 & -1 \\ \hline
\textbf{5} & 1 & -1 & 1 & 1 \\ \hline
\textbf{6} & 1 & -1 & 1 & -1 \\ \hline
\textbf{7} & 1 & -1 & -1 & 1 \\ \hline
\textbf{8} & 1 & -1 & -1 & -1 \\ \hline
\textbf{9} & -1 & 1 & 1 & 1 \\ \hline
\textbf{10} & -1 & 1 & 1 & -1 \\ \hline
\textbf{11} & -1 & 1 & -1 & 1 \\ \hline
\textbf{12} & -1 & 1 & -1 & -1 \\ \hline
\textbf{13} & -1 & -1 & 1 & 1 \\ \hline
\textbf{14} & -1 & -1 & 1 & -1 \\ \hline
\textbf{15} & -1 & -1 & -1 & 1 \\ \hline
\textbf{16} & -1 & -1 & -1 & -1 \\ \hline
\end{tabular}
\caption{Níveis utilizados em cada um dos experimentos para a Etapa 1}
\label{tab:etapa1_experimentos}
\end{center}
\end{table}

\begin{table}[htbp]
\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
\textbf{Experimento} & \textbf{A} & \textbf{C} & \textbf{D} \\ \hline
\textbf{1} & 1 & 1 & 1 \\ \hline
\textbf{2} & 1 & 1 & -1 \\ \hline
\textbf{3} & 1 & -1 & 1 \\ \hline
\textbf{4} & 1 & -1 & -1 \\ \hline
\textbf{5} & -1 & 1 & 1 \\ \hline
\textbf{6} & -1 & 1 & -1 \\ \hline
\textbf{7} & -1 & -1 & 1 \\ \hline
\textbf{8} & -1 & -1 & -1 \\ \hline
\end{tabular}
\caption{Níveis utilizados em cada um dos experimentos para as Etapa 2 e 3}
\label{tab:etapa2e3_experimentos}
\end{center}
\end{table}

Para a execução das repetições foi utilizado o \textit{script} bash que pode ser visto no Anexo \ref{cap:scripts}. Os testes executados com o IOzone \textit{Write}, \textit{Read}, \textit{Random Read} e \textit{Random Write} que correspondem, respectivamente, a Escrita, Leitura, Leitura aleatória e Escrita aleatória. Nos casos de Escrita e Leitura, o IOZone realiza as operações de leitura e escrita sequencial dentro de arquivos que ele mesmo cria com o tamanho especificado por um parâmetro pois é um fator desta avaliação. Nas operações de Escrita aleatória e Leitura aleatória, o IOZone realiza operaçõs de leitura e escrita não sequencial dentro dos arquivos criados por ele, ou seja, ele faz \textit{seek} para posições aleatórios dentro do arquivo e então executa a operação.

A alteração para variar a quantidade de memória RAM foi realizada manualmente, retirando-se um dos dois módulos de 1GB de memória e então prosseguir com a execução dos experimentos.



\chapter{Resultados Obtidos}\label{cap:resultados}

Este capítulo apresenta os resultados obtidos nos experimentos nas Etapas 1, 2
e 3. Os gráficos de barra utilizados foram agrupados de modo que cada
par de experimentos que possuam de variação entre eles apenas o fator Sistema
de arquivo sejam exibidos juntos para facilitar a comparação de um sistema de
arquivo em relação ao outro.

\section{Etapa 1: comparação entre Ext4 e XFS}\label{sec:etapa1}

Na primeira etapa do trabalho os sistemas de arquivos Ext4 e XFS foram
analisados em conjunto, a partir dos dados de experimentos de análise de
desempenho realizados separadamente, conforme descrito no
Capítulo \ref{cap:planejamento}.

Como pode ser observado na Figura \ref{fig:barra1_write}, o sistema de arquivos
XFS teve melhor desempenho para todos os experimentos envolvendo tamanho
de blocos de 4 KB. Entretanto, quando o bloco passa a ser de 1 KB, nada pode se
afirmar sobre qual dos dois sistemas de arquivos tem melhor desempenho, pois
seus intervalos de confiança se sobrepõem. Nota-se também que o melhor
desempenho de saída (MB/s) foi obtido utilizando XFS com blocos de 4 KB e
arquivos de tamanho de 64 MB, onde nada pode se afirmar sobre a memória, pois
para ambos os valores de 1 GB e 2 GB as taxas de saída com seus respectivos
intervalos de confiança se sobrepõem.

\begin{figure} [!ht]
\begin{center}
\includegraphics[scale=0.6]{images/ext4_xfs/ext4_xfs_write.png}
\caption {Gráfico comparando os experimentos da Etapa 1 na operação de Escrita.}
\label{fig:barra1_write}
\end{center}
\end{figure}

Ao comparar XFS e Ext4 para operação de leitura --- exemplo da Figura
\ref{fig:barra1_read} --- podemos notar que em dois experimentos o Ext4 possui
melhor desempenho que XFS: na leitura de blocos de 1 KB, com memória de 2 GB e
tamanho de arquivos de 64 KB; e em uma situação similar onde os tamanhos de
arquivos são de 64 MB. Apesar da diferença ser significativa para o primeiro
caso, para o segundo não é. Nos demais casos nada se pode afirmar sobre um
melhor desempenho, pois os resultados obtidos possuem intervalos de confiança
sobrepostos quando comparados.

\begin{figure} [!ht]
\begin{center}
\includegraphics[scale=0.6]{images/ext4_xfs/ext4_xfs_read.png}
\caption {Gráfico comparando os experimentos da Etapa 1 na operação de Leitura.}
\label{fig:barra1_read}
\end{center}
\end{figure}

Para a operação de leitura randômica, XFS e Ext4 obtiveram desempenhos
similares, com diferenças tênues para grande parte dos casos, como visto na
Figura \ref{fig:barra1_randread}. Um dos resultados com grande diferença ---
mas também grandes intervalos de confiança --- foi observado quando blocos de 4
KB foram utilizados com 1 GB de memória com arquivos de tamanho de 64 KB. Nesse
experimento, o Ext4 teve um desempenho \emph{médio} inferior ao XFS.
Entretanto, os intervalos de confiança se sobrepõem nos limites, fazendo com
que não seja possível afirmar com a certeza desejada qual se comporta da melhor
forma sob tais circunstâncias.

\begin{figure} [!ht]
\begin{center}
\includegraphics[scale=0.6]{images/ext4_xfs/ext4_xfs_randread.png}
\caption {Gráfico comparando os experimentos da Etapa 1 na operação de Leitura aleatória.}
\label{fig:barra1_randread}
\end{center}
\end{figure}

Por fim, na comparação utilizando operações de escrita randômica (vista na
Figura \ref{fig:barra1_randwrite}) o XFS teve um desempenho visivelmente
superior que o Ext4 quando os blocos eram de 4 KB, a memória de 2 GB e arquivos
de 64 KB. Uma diferença um pouco menor, com \emph{throughput} similar, pode ser
notada quando blocos de 1 KB, memória de 2 GB e arquivos de 64 MB são
utilizados. Os maiores desempenhos de \emph{throughput} são observados
quando a seguinte configuração é adotada: blocos de 4 KB, memória de 1 GB e
tamanho de arquivos de 64 KB. Ainda, uma variação dessa configuração com blocos
de 1 KB obtém performance mais previsível, ou seja, com menor intervalo de
confiança.
De forma geral nesse teste os sistemas de arquivos se comportam de maneira
similar, à parte exceções detalhadas previamente.

\begin{figure} [!ht]
\begin{center}
\includegraphics[scale=0.6]{images/ext4_xfs/ext4_xfs_randwrite.png}
\caption {Gráfico comparando os experimentos da Etapa 1 na operação de Escrita aleatória.}
\label{fig:barra1_randwrite}
\end{center}
\end{figure}

Por fim, ao utilizar os dados das medições, foi possível calcular as influências
dos fatores, apresentados na Tabela \ref{tab:influ1}.

\begin{table}[htbp]
\begin{center}
\begin{tabular}{|r|r|r|r|r|}
\hline
\multicolumn{1}{|l|}{\textbf{Fator}} & \multicolumn{1}{l|}{\textbf{Write}} & \multicolumn{1}{l|}{\textbf{Read}} & \multicolumn{1}{l|}{\textbf{Random Read}} & \multicolumn{1}{l|}{\textbf{Random Write}} \\ \hline
\textbf{iA} & 1.32 & 24.59 & 32.63 & 2.99 \\ \hline
\textbf{iB} & 78.78 & 0.16 & 0.00 & 0.08 \\ \hline
\textbf{iC} & 3.27 & 16.64 & 2.29 & 4.49 \\ \hline
\textbf{iD} & 10.12 & 50.71 & 62.44 & 90.90 \\ \hline
\textbf{iAB} & 1.44 & 0.14 & 0.37 & 0.23 \\ \hline
\textbf{iAC} & 1.03 & 2.55 & 0.11 & 0.20 \\ \hline
\textbf{iAD} & 0.29 & 0.40 & 1.44 & 0.03 \\ \hline
\textbf{iBC} & 0.12 & 0.37 & 0.02 & 0.01 \\ \hline
\textbf{iBD} & 3.13 & 1.78 & 0.01 & 0.04 \\ \hline
\textbf{iCD} & 0.10 & 0.56 & 0.20 & 0.23 \\ \hline
\textbf{iABC} & 0.02 & 0.71 & 0.23 & 0.57 \\ \hline
\textbf{iABD} & 0.00 & 0.04 & 0.14 & 0.04 \\ \hline
\textbf{iACD} & 0.03 & 0.32 & 0.00 & 0.01 \\ \hline
\textbf{iBCD} & 0.34 & 0.39 & 0.01 & 0.01 \\ \hline
\textbf{iABCD} & 0.01 & 0.63 & 0.11 & 0.16 \\ \hline
\end{tabular}
\end{center}
\label{tab:influ1}
\caption{Tabela com os valores calculados de influência dos fatores para a Etapa 1 da avaliação de desempenho separados para o tipo de operação.}
\end{table}

Nos gráficos gerados a partir dessa tabela (vide Figura
\ref{fig:etapa1_influs}), é possível notar que o tamanho de blocos é um fator
que possui grande influência quando comparamos o desempenho de Ext4 e XFS
para a operação de escrita. Esse fator faz com que o desempenho ambos os
sistemas de arquivos seja visivelmente degradado quando blocos pequenos são
utilizados. Também podemos notar que o tamanho de arquivos é um fator de grande
influência quando comparamos Ext4 e XFS para as operações de leitura, leitura
randômica e escrita randômica. Arquivos maiores (64 MB) degradaram o desempenho
de ambos os sistemas de arquivos. Por fim, a quantidade de memória disponível é
também um fator de grande importância para operações de leitura randômica e
escrita randômica. Nesse caso, com o aumento da memória disponível há uma
degradação no desempenho de ambos os sistemas de arquivos, onde essa degradação
é mais visível para o Ext4.

\begin{figure}[ht]
\centering
\subfigure[]{
\includegraphics[scale=0.65]{images/influencias/etapa1_write.png}
\label{fig:influ1_write}
}
\subfigure[]{
\includegraphics[scale=0.65]{images/influencias/etapa1_read.png}
\label{fig:influ1_read}
}
\subfigure[]{
\includegraphics[scale=0.65]{images/influencias/etapa1_randread.png}
\label{fig:influ1_randread}
}
\subfigure[]{
\includegraphics[scale=0.65]{images/influencias/etapa1_randwrite.png}
\label{fig:influ1_randwrite}
}
\label{fig:etapa1_influs}
\caption{Gráficos com as influências dos fatores calculadas para as operações avaliadas na Etapa 1: \subref{fig:influ1_write} - Escrita, \subref{fig:influ1_read} - Leitura, \subref{fig:influ1_randread} - Leitura aleatória e \subref{fig:influ1_randwrite} - Escrita aleatória}
\end{figure}

\clearpage

%%----------------------------------------------------------------
%%----------------------------------------------------------------
%%----------------------------------------------------------------

\section{Etapa 2: comparação entre EXT4 e ReiserFS}\label{sec:etapa2}

Na segunda etapa do trabalho os sistemas de arquivos Ext4 e ReiserFS foram
analisados em conjunto, a partir dos dados de experimentos de análise de
desempenho realizados separadamente, conforme descrito no
Capítulo \ref{cap:planejamento}. Vale ressaltar que o ReiserFS não disponibiliza
opção de utilização de blocos de tamanho de 1 KB. Portanto, o Fator B, conforme
apresentado na Tabela \ref{tab:etapa2_niveis}, não foi utilizado.

Como pode ser observado na Figura \ref{fig:barra2_write}, o sistema de arquivos
Ext4 possui melhor desempenho que o ReiserFS para todos os experimentos
realizados com a operação de escrita.

\begin{figure} [ht]
\begin{center}
\includegraphics[scale=0.6]{images/ext4_reiser/ext4_reiserfs_write.png}
\caption {Gráfico comparando os experimentos da Etapa 2 na operação de Escrita.}
\label{fig:barra2_write}
\end{center}
\end{figure}

Na Figura \ref{fig:barra2_read} --- que representa experimentos realizados para
a operação de leitura --- o ReiserFS apresentou em geral um melhor desempenho que
o Ext4, à parte o experimento 2, onde o segundo obteve um melhor desempenho.
Nesse caso, a configuração utilizada foi de 1 GB de memória e arquivos de 64
MB. Portanto, torna-se visível a degradação de desempenho do ReiserFS ao lidar
com arquivos de grande tamanho.

\begin{figure} [ht]
\begin{center}
\includegraphics[scale=0.6]{images/ext4_reiser/ext4_reiserfs_read.png}
\caption {Gráfico comparando os experimentos da Etapa 2 na operação de Leitura.}
\label{fig:barra2_read}
\end{center}
\end{figure}

Para a operação de leitura aleatória --- representada na  Figura
\ref{fig:barra2_randread} --- os resultados não são conclusivos de um modo
geral: o ReiserFS tem melhor desempenho para arquivos menores (64 KB) e memória
de 1 GB, enquanto para uma mesma configuração com arquivos maiores (64 MB) o
Ext4 o supera. Quando há mais memória disponível --- fator importante para
\emph{caching} --- não se pode concluir sobre qual é o sistema de arquivos mais
eficiente, pois os intervalos de confiança se sobrepõem.

\begin{figure} [ht]
\begin{center}
\includegraphics[scale=0.6]{images/ext4_reiser/ext4_reiserfs_randread.png}
\caption {Gráfico comparando os experimentos da Etapa 2 na operação de Leitura aleatória.}
\label{fig:barra2_randread}
\end{center}
\end{figure}

Por fim, para a operação de escrita randômica (vide Figura
\ref{fig:barra2_randwrite}), o ReiserFS obteve um melhor desempenho quando a
configuração de fatores envolvia mais quantidade de memória (2 GB). Por outro
lado, quando havia menor quantidade de memória (1 GB), nada se pode afirmar
sobre o desempenho de ambos, pois os intervalos de confiança se sobrepõem.

\begin{figure} [ht]
\begin{center}
\includegraphics[scale=0.6]{images/ext4_reiser/ext4_reiserfs_randwrite.png}
\caption {Gráfico comparando os experimentos da Etapa 2 na operação de Escrita aleatória.}
\label{fig:barra2_randwrite}
\end{center}
\end{figure}

Por fim, ao utilizar os dados das medições, foi possível calcular as influências
dos fatores, apresentados na Tabela \ref{tab:influ2}.

\begin{table}[htbp]
\begin{center}
\begin{tabular}{|r|r|r|r|r|}
\hline
\multicolumn{1}{|l|}{\textbf{Fator}} & \multicolumn{1}{l|}{\textbf{Write}} & \multicolumn{1}{l|}{\textbf{Read}} & \multicolumn{1}{l|}{\textbf{Random Read}} & \multicolumn{1}{l|}{\textbf{Random Write}} \\ \hline
\textbf{iA} & 78.06 & 9.11 & 1.61 & 4.39 \\ \hline
\textbf{iC} & 10.37 & 10.06 & 1.15 & 11.51 \\ \hline
\textbf{iD} & 3.79 & 64.00 & 95.71 & 82.09 \\ \hline
\textbf{iAC} & 0.46 & 5.60 & 0.09 & 0.02 \\ \hline
\textbf{iAD} & 7.06 & 8.04 & 1.43 & 0.33 \\ \hline
\textbf{iCD} & 0.08 & 0.46 & 0.00 & 1.51 \\ \hline
\textbf{iACD} & 0.18 & 2.72 & 0.00 & 0.15 \\ \hline
\end{tabular}
\end{center}
\caption{Tabela com os valores calculados de influência dos fatores para a Etapa 2 da avaliação de desempenho separados para o tipo de operação.}
\label{tab:influ2}
\end{table}


Nos gráficos gerados a partir dessa tabela (vide Figura
\ref{fig:etapa2_influs}), é possível notar que o tamanho de arquivos é um fator
que possui grande influência quando comparamos o desempenho de Ext4 e ReiserFS
para as operações de leitura, leitura randômica e escrita randômica. Esse fator
faz com que o desempenho do ReiserFS seja visivelmente degradado quando
arquivos grandes são utilizados. Também podemos notar que a quantidade de
memória disponível é um fator de grande importância quando comparamos o
desempenho de Ext4 e ReiserFS para operações de leitura randômica e escrita
randômica. Nesse caso, com o aumento da memória disponível há uma degradação no
desempenho de ambos os sistemas de arquivos, onde essa degradação é mais
visível para o ReiserFS.

\begin{figure}[ht]
\centering
\subfigure[]{
\includegraphics[scale=0.65]{images/influencias/etapa2_write.png}
\label{fig:influ2_write}
}
\subfigure[]{
\includegraphics[scale=0.65]{images/influencias/etapa2_read.png}
\label{fig:influ2_read}
}
\subfigure[]{
\includegraphics[scale=0.65]{images/influencias/etapa2_randread.png}
\label{fig:influ2_randread}
}
\subfigure[]{
\includegraphics[scale=0.65]{images/influencias/etapa2_randwrite.png}
\label{fig:influ2_randwrite}
}
\label{fig:etapa2_influs}
\caption{Gráficos com as influências dos fatores calculadas para as operações avaliadas na Etapa 2: \subref{fig:influ2_write} - Escrita, \subref{fig:influ2_read} - Leitura, \subref{fig:influ2_randread} - Leitura aleatória e \subref{fig:influ2_randwrite} - Escrita aleatória}
\end{figure}


\clearpage

%%----------------------------------------------------------------
%%----------------------------------------------------------------
%%----------------------------------------------------------------

\section{Etapa 3: comparação entre XFS e ReiserFS}\label{sec:etapa3}	

A terceira etapa do trabalho é a comparação entre os sistemas de arquivo XFS e
ReiserFS. Note que nessa etapa não foi considerado a mudança de tamanho de
blocos, já que o ReiserFS não possibilitava a sua utilização com 1 KB. As
discussões sobre os resultados obtidos nos gráficos seguintes serão, portanto,
considerados sempre com tamanho de bloco de 4 KB.

A partir do gráfico \ref{fig:barra3_write}, podemos concluir que o XFS desempenha
a operação de escrita melhor que o ReiserFS. Sendo que os melhores resultados
aparecem nos experimentos 2 e 4, ou seja, onde estava sendo utilizado arquivos
grandes, de 64 MB. Note que a memória RAM não influencia muito esses resultados.

\begin{figure} [!ht]
\begin{center}
\includegraphics[scale=0.6]{images/xfs_reiser/xfs_reiserfs_write.png}
\caption {Gráfico comparando os experimentos da Etapa 3 na operação de Escrita.}
\label{fig:barra3_write}
\end{center}
\end{figure}

Na operação de leitura, mostrada no gráfico \ref{fig:barra3_read}, há um ganho em
quase todas as comparações do ReiserFS. Nota-se, principalmente, um ganho nos
experimentos 5 e 7, onde foi considerado o teste com tamanho de arquivos
pequenos e memória RAM variável. Novamente não há grande influência do uso da
memória principal.

\begin{figure} [!ht]
\begin{center}
\includegraphics[scale=0.6]{images/xfs_reiser/xfs_reiserfs_read.png}
\caption {Gráfico comparando os experimentos da Etapa 3 na operação de Leitura.}
\label{fig:barra3_read}
\end{center}
\end{figure}

As operações de escrita randômica e leitura randômica ficam bem próximas entre
os sistemas de arquivos comparados, como é visto nos gráficos
\ref{fig:barra3_randwrite} e \ref{fig:barra3_randread}, respectivamente. Através
desses gráficos é possível visualizar que o melhor resultado é obtido nos
experimentos 1 ou 5 em ambas operações. Estes experimentos utilizavam tamanhos de arquivos
pequenos, de 64 KB e a memória principal de 2 GB. Note que a memória influencia
muito nesses resultados.

\begin{figure} [!ht]
\begin{center}
\includegraphics[scale=0.6]{images/xfs_reiser/xfs_reiserfs_randread.png}
\caption {Gráfico comparando os experimentos da Etapa 3 na operação de Leitura
aleatória.}
\label{fig:barra3_randread}
\end{center}
\end{figure}

\begin{figure} [!ht]
\begin{center}
\includegraphics[scale=0.6]{images/xfs_reiser/xfs_reiserfs_randwrite.png}
\caption {Gráfico comparando os experimentos da Etapa 3 na operação de Escrita aleatória.}
\label{fig:barra3_randwrite}
\end{center}
\end{figure}

Para o cálculo da influência dos fatores, seguem a tabela \ref{tab:influ3} com os dados e os gráficos de pizza na figura \ref{fig:etapa3_influs}.

\begin{table}[htbp]
\begin{center}
\begin{tabular}{|r|r|r|r|r|}
\hline
\multicolumn{1}{|l|}{\textbf{Fator}} & \multicolumn{1}{l|}{\textbf{Write}} & \multicolumn{1}{l|}{\textbf{Read}} & \multicolumn{1}{l|}{\textbf{Random Read}} & \multicolumn{1}{l|}{\textbf{Random Write}} \\ \hline
\textbf{iA} & 88.16 & 31.25 & 8.89 & 4.39 \\ \hline
\textbf{iC} & 4.68 & 18.53 & 3.70 & 11.51 \\ \hline
\textbf{iD} & 1.70 & 38.86 & 83.58 & 82.09 \\ \hline
\textbf{iAC} & 1.50 & 0.16 & 0.31 & 0.02 \\ \hline
\textbf{iAD} & 3.69 & 8.77 & 3.05 & 0.33 \\ \hline
\textbf{iCD} & 0.09 & 2.19 & 0.24 & 1.51 \\ \hline
\textbf{iACD} & 0.18 & 0.25 & 0.23 & 0.15 \\ \hline
\end{tabular}
\end{center}
\caption{Tabela com os valores calculados de influência dos fatores para a Etapa 3 da avaliação de desempenho separados para o tipo de operação.}
\label{tab:influ3}
\end{table}


Nos gráficos gerados a partir dessa tabela (vide Figura
\ref{fig:etapa3_influs}), é possível notar que os próprios sistemas de arquivos
têm influência quando comparados para a operação de escrita.
Também podemos notar que o tamanho de arquivos é um fator de grande
influência quando comparamos XFS e ReiserFS para as operações de leitura,
leitura randômica e escrita randômica. Arquivos maiores (64 MB) degradaram o
desempenho de ambos os sistemas de arquivos. 
Por fim, a quantidade de memória disponível é também um fator de importância
para operação de leitura randômica. Nesse caso, com o aumento da memória
disponível há uma degradação no desempenho de ambos os sistemas de arquivos.

\begin{figure}[ht]
\centering
\subfigure[]{
\includegraphics[scale=0.65]{images/influencias/etapa3_write.png}
\label{fig:influ3_write}
}
\subfigure[]{
\includegraphics[scale=0.65]{images/influencias/etapa3_read.png}
\label{fig:influ3_read}
}
\subfigure[]{
\includegraphics[scale=0.65]{images/influencias/etapa3_randread.png}
\label{fig:influ3_randread}
}
\subfigure[]{
\includegraphics[scale=0.65]{images/influencias/etapa3_randwrite.png}
\label{fig:influ3_randwrite}
}
\label{fig:etapa3_influs}
\caption{Gráficos com as influências dos fatores calculadas para as operações avaliadas na Etapa 3: \subref{fig:influ3_write} - Escrita, \subref{fig:influ3_read} - Leitura, \subref{fig:influ3_randread} - Leitura aleatória e \subref{fig:influ3_randwrite} - Escrita aleatória}
\end{figure}

\clearpage

%%----------------------------------------------------------------
%%----------------------------------------------------------------
%%----------------------------------------------------------------
	
\chapter{Conclusões}\label{cap:conclusao}

Neste capítulo serão apresetadas as conclusões para as observações feitas a
partir dos experimentos realizados e apresentados nos capítulos anteriores.
Será feita uma análise para cada etapa de experimentos, seguida de uma conclusão
final.

%%----------------------------------------------------------------
%%----------------------------------------------------------------
%%----------------------------------------------------------------

\section{Etapa 1: comparação entre Ext4 e XFS}\label{sec:etapa1conc}

Na primeira etapa do trabalho os sistemas de arquivos Ext4 e XFS foram
analisados em conjunto. A partir dessa análise, algumas concluões são possíveis:

\begin{itemize}
  \item O sistema de arquivos XFS teve melhor ou igual desempenho para todos os
  experimentos realizados envolvendo blocos de tamanho 4 KB;
  
  \item Para demais operações XFS e Ext4 obtiveram desempenhos similares, com
  diferenças tênues para grande parte dos casos;
  
  \item O tamanho de blocos é um fator que possui grande influência quando
  comparamos o desempenho de Ext4 e XFS para a operação de escrita; e
  
  \item O tamanho de arquivos é um fator de grande influência quando comparamos
  Ext4 e XFS para as operações de leitura, leitura randômica e escrita
  randômica.
\end{itemize}

%%----------------------------------------------------------------
%%----------------------------------------------------------------
%%----------------------------------------------------------------

\section{Etapa 2: comparação entre Ext4 e ReiserFS}\label{sec:etapa2conc}

Na segunda etapa do trabalho os sistemas de arquivos Ext4 e ReiserFS foram
analisados em conjunto. A partir dessa análise, algumas conclusões são possíveis:

\begin{itemize}
  \item O sistema de arquivos Ext4 possui melhor desempenho que o ReiserFS para
  todos os experimentos realizados com a operação de escrita;
  
  \item O sistema de arquivos ReiserFS apresentou em geral um melhor desempenho
  que o Ext4 em experimentos envolvendo a operação de leitura para arquivos
  menores (64 KB);
  
  \item O sistema de arquivos ReiserFS apresentou em geral um melhor desempenho
  que o Ext4 em experimentos envolvendo a operação de escrita para
  configurações onde havia maior quantidade de memória (2 GB);
  
  \item Para demais operações Ext4 e ReiserFS obtiveram desempenhos similares,
  com diferenças tênues para grande parte dos casos;
  
  \item O tamanho de arquivos é um fator que possui grande influência quando comparamos
  o desempenho de Ext4 e ReiserFS para as operações de leitura, leitura 
  randômica e escrita randômica --- há queda de desempenho para arquivos
  maiores (64 MB); 
\end{itemize}

%%----------------------------------------------------------------
%%----------------------------------------------------------------
%%----------------------------------------------------------------

\section{Etapa 3 }\label{sec:etapa3conc}	

Na segunda etapa do trabalho os sistemas de arquivos XFS e ReiserFS foram
analisados em conjunto. A partir dessa análise, algumas conclusões são possíveis:

\begin{itemize}
  \item O sistema de arquivos XFS obteve um melhor resultado na operação de	escrita
  em todos os casos;

  \item O sistema de arquivos ReiserFS teve um desempenho melhor em geral nos casos
  da operação de leitura, principalmente utilizando arquivos pequenos, de 64 KB;

  \item Os dois sistemas de arquivos obtiveram resultados muito parecidos nas operações
  de escrita randômica e leitura randômica;

  \item O tamanho de arquivo foi o fator que mais influenciou as operações de leitura,
  escrita randômica e leitura randômica.
\end{itemize}

%%----------------------------------------------------------------
%%----------------------------------------------------------------
%%----------------------------------------------------------------
\section{Considerações finais}\label{sec:consideracoes}	
	
De uma forma geral, quando utilizamos uma formatação padrão de um sistema de
arquivos --- que utiliza blocos de 4 KB --- torna-se mais interessante o uso do
sistema de arquivos XFS frente ao sistema de arquivos Ext4.

%%----------------------------------------------------------------
%%----------------------------------------------------------------
%%----------------------------------------------------------------

\bibliographystyle{abnt-num}
\bibliography{monografia}

\anexo
\chapter{Scripts utilizados}
\label{cap:scripts}

\section{Execução dos experimentos}

\lstset{
	numbers=left,
	language=bash,
        basicstyle=\scriptsize,
        upquote=true,
        aboveskip={1.5\baselineskip},
        columns=fixed,
        showstringspaces=false,
        extendedchars=true,
        breaklines=true,
        prebreak = \raisebox{0ex}[0ex][0ex]{\ensuremath{\hookleftarrow}},
        frame=single,
        showtabs=false,
        showspaces=false,
        showstringspaces=false,
	tabsize=1,
        identifierstyle=\ttfamily,
        keywordstyle=\color[rgb]{0,0,1},
        commentstyle=\color[rgb]{0.133,0.545,0.133},
        stringstyle=\color[rgb]{0.627,0.126,0.941},
	captionpos=b,
	caption={Script bash utilizado para execução dos experimentos. Foi executado uma vez com a máquina com 2GB de memória RAM e outra com 1GB de memória RAM.}
}
\lstinputlisting{include/execute.sh}


\section{Extração dos dados do log}

\lstset{
	captionpos=b,
	caption={Script bash utilizado para extrair os dados dos log dos experimentos para um formato separado por vírgulas que possibilitava a importação para uma planilha do OpenOffice.}
}
\lstinputlisting{include/extract.sh}

\section{Geração dos gráficos de barra}

\lstset{
	numbers=left,
	language=Gnuplot,
        basicstyle=\scriptsize,
        upquote=true,
        aboveskip={1.5\baselineskip},
        columns=fixed,
        showstringspaces=false,
        extendedchars=true,
        breaklines=true,
        prebreak = \raisebox{0ex}[0ex][0ex]{\ensuremath{\hookleftarrow}},
        frame=single,
        showtabs=false,
        showspaces=false,
        showstringspaces=false,
	tabsize=1,
        identifierstyle=\ttfamily,
        keywordstyle=\color[rgb]{0,0,1},
        commentstyle=\color[rgb]{0.133,0.545,0.133},
        stringstyle=\color[rgb]{0.627,0.126,0.941},
	captionpos=b,
	caption={Script do Gnuplot utilizado gerar os gráficos de barra para comparação dos experimentos.}
}
\lstinputlisting{include/plot.gp}

\end{document}
